{"version":3,"file":"main.50f587a1f8948207e81e.bundle.js","sources":["webpack:///./src/emphasis/alert/Alert.tsx"],"sourcesContent":["/**\n * Copyright (c) 2018 Dell Inc., or its subsidiaries. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport * as React from \"react\";\nimport \"@clr/icons/clr-icons.min.css\";\nimport \"@webcomponents/custom-elements/custom-elements.min.js\";\nimport \"@clr/icons/clr-icons.min.js\";\nimport {Icon} from \"../../icon\";\nimport * as utils from \"../../utils\";\nimport {AlertItem} from \"./AlertItem\";\n\nexport interface AlertProps {\n    closeable?: boolean | undefined\n    children?: React.ReactNode | React.ReactNode[]\n    level?: AlertLevel\n    onClose?: React.MouseEventHandler<any>,\n    size?: AlertSize\n    isStatic?: boolean\n    style?: any\n    type: AlertType\n}\n\nexport enum AlertType {\n    INFO = \"info\",\n    DANGER = \"danger\",\n    WARNING = \"warning\",\n    SUCCESS = \"success\"\n}\n\nexport enum AlertSize {\n    COMPACT = \"compact\"\n}\n\nexport enum AlertLevel {\n    APP = \"app\"\n}\n\n//TODO: Add alert paging for app-level alerts\n//TODO: Improve alert action styling\nexport class Alert extends React.PureComponent<AlertProps> {\n    constructor(props: AlertProps) {\n        super(props);\n    }\n\n    private static getClassNames(props: AlertProps): (string | undefined)[] {\n        const {type, isStatic, level, size} = props;\n        return [\n            \"alert\",\n            (type ? `alert-${type}` : undefined),\n            (size ? `alert-${size}` : undefined),\n            (isStatic ? \"static\" : undefined),\n            (level == AlertLevel.APP ? \"alert-app-level\" : undefined),\n            (size == AlertSize.COMPACT ? \"alert-sm\" : undefined)\n        ]\n    }\n\n    render() {\n        const {type, children, closeable, onClose, style} = this.props;\n        return (\n            <div className={utils.classNames(Alert.getClassNames(this.props))}\n                 role=\"alert\"\n                 style={style}>\n                <div className=\"alert-items\">\n                    {Alert.withAlertType(type, children)}\n                </div>\n                {closeable &&\n                <button type=\"button\"\n                        onClick={onClose}\n                        className=\"close\"\n                        aria-label=\"Close\">\n                  <Icon aria-hidden=\"true\" shape=\"close\"/>\n                </button>\n                }\n            </div>\n        );\n    }\n\n    private static withAlertType(alertType: AlertType, children: utils.ReactChildren): utils.ReactChildren {\n        return React.Children.map(children, (child => {\n            const childEl = child as React.ReactElement;\n            if (childEl.type === AlertItem)\n                return React.cloneElement(childEl, {\n                    type: alertType\n                });\n        }));\n    }\n\n}\n"],"mappings":"AA6BA","sourceRoot":""}